#include <stdio.h>
#include <stdlib.h>
struct AVL {
int key;
struct AVL *left;
struct AVL *right;
int height;
};
typedef struct AVL node;
int getHeight(node *n) {
if (n == NULL) return 0;
return n->height;
}
node *createNode(int key) {
node* n = (node *)malloc(sizeof(node));
n->key = key;
n->left = NULL;
n->right = NULL;
n->height = 1;
return n;
}
int max(int a, int b) {
return (a > b) ? a : b;
}
int getBalanceFactor(node *n) {
if (n == NULL) return 0;
return getHeight(n->left) - getHeight(n->right);
}
node* leftRotate(node* A) {
node* B = A->left;
node* RB = B->right;
B->right = A;
A->left = RB;
A->height = max(getHeight(A->right), getHeight(A->left)) + 1;
B->height = max(getHeight(B->right), getHeight(B->left)) + 1;
return B;
}
node* rightRotate(node* A) {
node* B = A->right;
node* LB = B->left;
B->left = A;
A->right = LB;
A->height = max(getHeight(A->right), getHeight(A->left)) + 1;
B->height = max(getHeight(B->right), getHeight(B->left)) + 1;
return B;
}
node* leftrightRotate(node* A) {
node* B = A->left;
node* C = B->right;
node* LC = C->left;
node* RC = C->right;
C->left = B;
C->right = A;
B->right = LC;
A->left = RC;
A->height = max(getHeight(A->right), getHeight(A->left)) + 1;
B->height = max(getHeight(B->right), getHeight(B->left)) + 1;
C->height = max(getHeight(C->right), getHeight(C->left)) + 1;
return C;
}
node* rightleftRotate(node* A) {
node* B = A->right;
node* C = B->left;
node* LC = C->left;
node* RC = C->right;
C->left = A;
C->right = B;
A->right = LC;
B->left = RC;
A->height = max(getHeight(A->right), getHeight(A->left)) + 1;
B->height = max(getHeight(B->right), getHeight(B->left)) + 1;
C->height = max(getHeight(C->right), getHeight(C->left)) + 1;
return C;
}
node *insert(node* n, int key) {
int bf;
if (n == NULL) return createNode(key);
if (key < n->key) n->left = insert(n->left, key);
else if (key > n->key) n->right = insert(n->right, key);
n->height = 1 + max(getHeight(n->left), getHeight(n->right));
bf = getBalanceFactor(n);
if (bf > 1 && key < n->left->key) return leftRotate(n);
if (bf < -1 && key > n->right->key) return rightRotate(n);
if (bf > 1 && key > n->left->key) return leftrightRotate(n);
if (bf < -1 && key < n->right->key) return rightleftRotate(n);
return n;
}
void printtree(node *root, int space, int n) {
int i;
if (root == NULL) return;
space += n;
printtree(root->right, space, n);
printf("\n");
for (i = n; i < space; i++) printf(" ");
printf("(%d)\n", root->key);
printtree(root->left, space, n);
}
int main() {
node *root = NULL;
int n, i, key;
printf("Enter the number of nodes\n");
scanf("%d", &n);
for (i = 0; i < n; i++) {
printf("Enter the key\n");
scanf("%d", &key);
root = insert(root, key);
}
printtree(root, 0, n);
return 0;
}
